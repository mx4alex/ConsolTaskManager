// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	entity "TaskManager/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTaskStorage is a mock of TaskStorage interface.
type MockTaskStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTaskStorageMockRecorder
}

// MockTaskStorageMockRecorder is the mock recorder for MockTaskStorage.
type MockTaskStorageMockRecorder struct {
	mock *MockTaskStorage
}

// NewMockTaskStorage creates a new mock instance.
func NewMockTaskStorage(ctrl *gomock.Controller) *MockTaskStorage {
	mock := &MockTaskStorage{ctrl: ctrl}
	mock.recorder = &MockTaskStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskStorage) EXPECT() *MockTaskStorageMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockTaskStorage) AddTask(newText string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", newText)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTask indicates an expected call of AddTask.
func (mr *MockTaskStorageMockRecorder) AddTask(newText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockTaskStorage)(nil).AddTask), newText)
}

// DeleteTask mocks base method.
func (m *MockTaskStorage) DeleteTask(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskStorageMockRecorder) DeleteTask(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskStorage)(nil).DeleteTask), id)
}

// GetTasks mocks base method.
func (m *MockTaskStorage) GetTasks() ([]entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks")
	ret0, _ := ret[0].([]entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockTaskStorageMockRecorder) GetTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockTaskStorage)(nil).GetTasks))
}

// MarkTask mocks base method.
func (m *MockTaskStorage) MarkTask(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkTask", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkTask indicates an expected call of MarkTask.
func (mr *MockTaskStorageMockRecorder) MarkTask(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTask", reflect.TypeOf((*MockTaskStorage)(nil).MarkTask), id)
}

// UpdateTask mocks base method.
func (m *MockTaskStorage) UpdateTask(id int, newText string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", id, newText)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskStorageMockRecorder) UpdateTask(id, newText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskStorage)(nil).UpdateTask), id, newText)
}
